CREATE TABLE props (_id INTEGER PRIMARY KEY AUTOINCREMENT, key TEXT UNIQUE, value TEXT);
-- Note: sqlite_sequence tables are created automatically, so no need to include a CREATE statement for it.
-- CREATE TABLE sqlite_sequence(name,seq);
CREATE TABLE message (_id INTEGER PRIMARY KEY AUTOINCREMENT, chat_row_id INTEGER NOT NULL, from_me INTEGER NOT NULL, key_id TEXT NOT NULL, sender_jid_row_id INTEGER, status INTEGER, broadcast INTEGER, recipient_count INTEGER, participant_hash TEXT, origination_flags INTEGER, origin INTEGER, timestamp INTEGER, received_timestamp INTEGER, receipt_server_timestamp INTEGER, message_type INTEGER, text_data TEXT, starred INTEGER, lookup_tables INTEGER, message_add_on_flags INTEGER, sort_id INTEGER NOT NULL DEFAULT 0 );
CREATE TABLE message_quoted (message_row_id INTEGER PRIMARY KEY AUTOINCREMENT, chat_row_id INTEGER NOT NULL, parent_message_chat_row_id INTEGER NOT NULL, from_me INTEGER NOT NULL, sender_jid_row_id INTEGER, key_id TEXT NOT NULL, timestamp INTEGER, message_type INTEGER, origin INTEGER, text_data TEXT, payment_transaction_id TEXT, lookup_tables INTEGER);
CREATE TABLE messages_hydrated_four_row_template (message_row_id INTEGER PRIMARY KEY, message_template_id TEXT);
CREATE TABLE message_orphaned_edit (_id INTEGER PRIMARY KEY, key_id TEXT    NOT NULL, from_me INTEGER NOT NULL, chat_row_id INTEGER NOT NULL, sender_jid_row_id INTEGER NOT NULL DEFAULT (0), timestamp INTEGER, message_type INTEGER NOT NULL, revoked_key_id TEXT, retry_count INTEGER, admin_jid_row_id INTEGER);
CREATE TABLE message_quoted_mentions (_id INTEGER PRIMARY KEY AUTOINCREMENT, message_row_id INTEGER, jid_row_id INTEGER);
CREATE TABLE message_quoted_vcard (_id INTEGER PRIMARY KEY AUTOINCREMENT, message_row_id INTEGER, vcard TEXT);
CREATE TABLE message_product (message_row_id INTEGER PRIMARY KEY, business_owner_jid INTEGER, product_id TEXT, title TEXT, description TEXT, currency_code TEXT, amount_1000 INTEGER, retailer_id TEXT, url TEXT, product_image_count INTEGER, sale_amount_1000 INTEGER, body TEXT, footer Text);
CREATE TABLE message_quoted_product (message_row_id INTEGER PRIMARY KEY, business_owner_jid INTEGER, product_id TEXT, title TEXT, description TEXT, currency_code TEXT, amount_1000 INTEGER, retailer_id TEXT, url TEXT, product_image_count INTEGER, sale_amount_1000 INTEGER, body TEXT, footer Text);
CREATE TABLE message_order (message_row_id INTEGER PRIMARY KEY, order_id TEXT,thumbnail BLOB,order_title TEXT,item_count INTEGER,status INTEGER,surface INTEGER,message TEXT,seller_jid INTEGER,token TEXT,currency_code TEXT,total_amount_1000 INTEGER);
CREATE TABLE message_quoted_order (message_row_id INTEGER PRIMARY KEY, order_id TEXT,thumbnail BLOB,order_title TEXT,item_count INTEGER,status INTEGER,surface INTEGER,message TEXT,seller_jid INTEGER,token TEXT,currency_code TEXT,total_amount_1000 INTEGER);
CREATE TABLE message_group_invite (message_row_id INTEGER PRIMARY KEY, group_jid_row_id INTEGER NOT NULL, admin_jid_row_id INTEGER NOT NULL, group_name TEXT, invite_code TEXT, expiration INTEGER, invite_time INTEGER, expired INTEGER, group_type INTEGER NOT NULL DEFAULT 0);
CREATE TABLE message_quoted_group_invite_legacy (message_row_id INTEGER PRIMARY KEY, group_jid_row_id INTEGER NOT NULL, admin_jid_row_id INTEGER NOT NULL, group_name TEXT, invite_code TEXT, expiration INTEGER, invite_time INTEGER, expired INTEGER, group_type INTEGER NOT NULL DEFAULT 0);
CREATE TABLE message_quoted_group_invite (message_row_id INTEGER PRIMARY KEY, group_jid_row_id INTEGER NOT NULL, admin_jid_row_id INTEGER NOT NULL, group_name TEXT, invite_code TEXT, expiration INTEGER, invite_time INTEGER, expired INTEGER, group_type INTEGER NOT NULL DEFAULT 0);
CREATE TABLE message_template (message_row_id             INTEGER PRIMARY KEY, content_text_data          TEXT NOT NULL, footer_text_data           TEXT, template_id                TEXT, csat_trigger_expiration_ts INTEGER);
CREATE TABLE message_template_button (_id INTEGER PRIMARY KEY AUTOINCREMENT,message_row_id INTEGER, text_data TEXT NOT NULL, extra_data TEXT, button_type INTEGER,used INTEGER,selected_index INTEGER,otp_button_type INTEGER);
CREATE TABLE message_template_quoted (message_row_id INTEGER PRIMARY KEY, content_text_data TEXT NOT NULL,footer_text_data TEXT);
CREATE TABLE message_location (message_row_id INTEGER PRIMARY KEY, chat_row_id INTEGER, latitude REAL, longitude REAL, place_name TEXT, place_address TEXT, url TEXT, live_location_share_duration INTEGER, live_location_sequence_number INTEGER, live_location_final_latitude REAL, live_location_final_longitude REAL, live_location_final_timestamp INTEGER, map_download_status INTEGER);
CREATE TABLE message_quoted_location (message_row_id INTEGER PRIMARY KEY, latitude REAL, longitude REAL, place_name TEXT, place_address TEXT, url TEXT, thumbnail BLOB);
CREATE TABLE message_media (message_row_id INTEGER PRIMARY KEY, chat_row_id INTEGER, autotransfer_retry_enabled INTEGER, multicast_id TEXT, media_job_uuid TEXT, transferred INTEGER, transcoded INTEGER, file_path TEXT, file_size INTEGER, suspicious_content INTEGER, trim_from INTEGER, trim_to INTEGER, face_x INTEGER, face_y INTEGER, media_key BLOB, media_key_timestamp INTEGER, width INTEGER, height INTEGER, has_streaming_sidecar INTEGER, gif_attribution INTEGER, thumbnail_height_width_ratio REAL, direct_path TEXT, first_scan_sidecar BLOB, first_scan_length INTEGER, message_url TEXT, mime_type TEXT, file_length INTEGER, media_name TEXT, file_hash TEXT, media_duration INTEGER, page_count INTEGER, enc_file_hash TEXT, partial_media_hash TEXT, partial_media_enc_hash TEXT, is_animated_sticker INTEGER, original_file_hash TEXT, mute_video INTEGER DEFAULT 0, media_caption TEXT);
CREATE TABLE message_media_interactive_annotation (_id INTEGER PRIMARY KEY AUTOINCREMENT, message_row_id INTEGER, location_latitude REAL, location_longitude REAL, location_name TEXT, sort_order INTEGER);
CREATE TABLE message_media_interactive_annotation_vertex (_id INTEGER PRIMARY KEY AUTOINCREMENT, message_media_interactive_annotation_row_id INTEGER, x REAL, y REAL, sort_order INTEGER);
CREATE TABLE message_quoted_media (message_row_id INTEGER PRIMARY KEY, media_job_uuid TEXT, transferred INTEGER, file_path TEXT, file_size INTEGER, media_key BLOB, media_key_timestamp INTEGER, width INTEGER, height INTEGER, direct_path TEXT, message_url TEXT, mime_type TEXT, file_length INTEGER, media_name TEXT, file_hash TEXT, media_duration INTEGER, page_count INTEGER, enc_file_hash TEXT, thumbnail BLOB, media_caption TEXT);
CREATE TABLE frequents (_id INTEGER PRIMARY KEY AUTOINCREMENT, jid TEXT NOT NULL, type INTEGER NOT NULL, message_count INTEGER NOT NULL);
CREATE TABLE frequent (_id INTEGER PRIMARY KEY AUTOINCREMENT, jid_row_id INTEGER NOT NULL, type INTEGER NOT NULL, message_count INTEGER NOT NULL);
CREATE TABLE receipt_user(_id INTEGER PRIMARY KEY AUTOINCREMENT,message_row_id INTEGER NOT NULL,receipt_user_jid_row_id INTEGER NOT NULL,receipt_timestamp INTEGER,read_timestamp INTEGER,played_timestamp INTEGER);
CREATE TABLE receipt_device (_id INTEGER PRIMARY KEY AUTOINCREMENT, message_row_id INTEGER NOT NULL, receipt_device_jid_row_id INTEGER NOT NULL, receipt_device_timestamp INTEGER, primary_device_version INTEGER);
CREATE TABLE receipt_orphaned (_id INTEGER PRIMARY KEY AUTOINCREMENT, chat_row_id INTEGER NOT NULL, from_me INTEGER NOT NULL, key_id TEXT NOT NULL, receipt_device_jid_row_id INTEGER NOT NULL, receipt_recipient_jid_row_id INTEGER, status INTEGER, timestamp INTEGER);
CREATE TABLE receipts(_id INTEGER PRIMARY KEY AUTOINCREMENT, key_remote_jid TEXT NOT NULL, key_id TEXT NOT NULL, remote_resource TEXT, receipt_device_timestamp INTEGER, read_device_timestamp INTEGER, played_device_timestamp INTEGER);
CREATE TABLE message_mentions (_id INTEGER PRIMARY KEY AUTOINCREMENT, message_row_id INTEGER, jid_row_id INTEGER);
CREATE TABLE message_vcard (_id INTEGER PRIMARY KEY AUTOINCREMENT, message_row_id INTEGER, vcard TEXT);
CREATE TABLE message_media_vcard_count(_id INTEGER PRIMARY KEY AUTOINCREMENT, message_row_id INTEGER, count INTEGER);
CREATE TABLE message_vcard_jid(_id INTEGER PRIMARY KEY AUTOINCREMENT, vcard_jid_row_id INTEGER, vcard_row_id INTEGER, message_row_id INTEGER);
CREATE TABLE user_device (_id INTEGER PRIMARY KEY AUTOINCREMENT, user_jid_row_id INTEGER, device_jid_row_id INTEGER, key_index INTEGER NOT NULL DEFAULT 0);
CREATE TABLE primary_device_version (user_jid_row_id INTEGER PRIMARY KEY, version INTEGER NOT NULL DEFAULT 0);
CREATE TABLE group_participant_user (_id INTEGER PRIMARY KEY AUTOINCREMENT, group_jid_row_id INTEGER NOT NULL, user_jid_row_id INTEGER NOT NULL, rank INTEGER, pending INTEGER);
CREATE TABLE group_participant_device (_id INTEGER PRIMARY KEY AUTOINCREMENT, group_participant_row_id INTEGER NOT NULL, device_jid_row_id INTEGER NOT NULL, sent_sender_key INTEGER);
CREATE TABLE group_past_participant_user (_id INTEGER PRIMARY KEY AUTOINCREMENT, group_jid_row_id INTEGER NOT NULL, user_jid_row_id INTEGER NOT NULL, is_leave INTEGER NOT NULL, timestamp INTEGER);
CREATE TABLE message_external_ad_content (message_row_id INTEGER PRIMARY KEY, title TEXT, body TEXT, media_type INTEGER, thumbnail_url TEXT, full_thumbnail BLOB, micro_thumbnail BLOB, media_url TEXT, source_type TEXT, source_id TEXT, source_url TEXT, render_larger_thumbnail BOOLEAN, show_ad_attribution BOOLEAN, has_icebreaker_auto_response BOOLEAN );
CREATE TABLE group_participants (_id INTEGER PRIMARY KEY AUTOINCREMENT, gjid TEXT NOT NULL, jid TEXT NOT NULL, admin INTEGER, pending INTEGER, sent_sender_key INTEGER);
CREATE TABLE group_participants_history (_id INTEGER PRIMARY KEY AUTOINCREMENT, timestamp DATETIME NOT NULL, gjid TEXT NOT NULL, jid TEXT NOT NULL, action INTEGER NOT NULL, old_phash TEXT NOT NULL, new_phash TEXT NOT NULL);
CREATE TABLE group_notification_version (group_jid_row_id INTEGER PRIMARY KEY, subject_timestamp INTEGER NOT NULL, announcement_version INTEGER NOT NULL, participant_version INTEGER NOT NULL);
CREATE TABLE media_refs (_id INTEGER PRIMARY KEY AUTOINCREMENT, path TEXT UNIQUE, ref_count INTEGER);
CREATE TABLE message_thumbnails (thumbnail BLOB, timestamp DATETIME, key_remote_jid TEXT NOT NULL, key_from_me INTEGER, key_id TEXT NOT NULL);
CREATE TABLE message_streaming_sidecar (message_row_id INTEGER PRIMARY KEY, sidecar BLOB, chunk_lengths BLOB, timestamp INTEGER);
CREATE TABLE mms_thumbnail_metadata (message_row_id INTEGER PRIMARY KEY, direct_path TEXT, media_key BLOB, media_key_timestamp INTEGER, enc_thumb_hash TEXT, thumb_hash TEXT, thumb_width INTEGER, thumb_height INTEGER, transferred INTEGER, micro_thumbnail BLOB, insert_timestamp INTEGER);
CREATE TABLE audio_data (message_row_id INTEGER PRIMARY KEY, waveform BLOB);
CREATE TABLE status_list (_id INTEGER PRIMARY KEY AUTOINCREMENT, key_remote_jid TEXT UNIQUE, message_table_id INTEGER, last_read_message_table_id INTEGER, last_read_receipt_sent_message_table_id INTEGER, first_unread_message_table_id INTEGER, autodownload_limit_message_table_id INTEGER, timestamp INTEGER, unseen_count INTEGER, total_count INTEGER);
CREATE TABLE status (_id INTEGER PRIMARY KEY AUTOINCREMENT, jid_row_id INTEGER UNIQUE, message_table_id INTEGER, last_read_message_table_id INTEGER, last_read_receipt_sent_message_table_id INTEGER, first_unread_message_table_id INTEGER, autodownload_limit_message_table_id INTEGER, timestamp INTEGER, unseen_count INTEGER, total_count INTEGER);
CREATE TABLE deleted_chat_job(_id INTEGER PRIMARY KEY AUTOINCREMENT, chat_row_id INTEGER NOT NULL, block_size INTEGER, singular_message_delete_rows_id TEXT, deleted_message_row_id  INTEGER, deleted_starred_message_row_id  INTEGER, deleted_messages_remove_files BOOLEAN, deleted_categories_message_row_id INTEGER, deleted_categories_starred_message_row_id INTEGER, deleted_categories_remove_files BOOLEAN, deleted_message_categories TEXT, delete_files_singular_delete BOOLEAN);
CREATE TABLE pay_transaction (_id INTEGER PRIMARY KEY AUTOINCREMENT, message_row_id INTEGER, remote_jid_row_id INTEGER, key_id TEXT, interop_id TEXT, id TEXT, timestamp INTEGER, status INTEGER, error_code TEXT, sender_jid_row_id INTEGER, receiver_jid_row_id INTEGER, type INTEGER, currency_code TEXT, amount_1000, credential_id TEXT, methods TEXT, bank_transaction_id TEXT, metadata TEXT, init_timestamp INTEGER, request_key_id TEXT, country TEXT, version INTEGER, future_data BLOB, service_id INTEGER, background_id TEXT, purchase_initiator INTEGER);
CREATE TABLE payment_background (background_id TEXT PRIMARY KEY, file_size INTEGER, width INTEGER, height INTEGER, mime_type TEXT, placeholder_color INTEGER, text_color INTEGER, subtext_color INTEGER, fullsize_url TEXT, description TEXT, lg TEXT, media_key BLOB, media_key_timestamp INTEGER, file_sha256 TEXT, file_enc_sha256 TEXT, direct_path TEXT);
CREATE TABLE payment_background_order (background_id TEXT PRIMARY KEY, background_order INTEGER);
CREATE TABLE call_log (_id INTEGER PRIMARY KEY AUTOINCREMENT, jid_row_id INTEGER, from_me INTEGER, call_id TEXT, transaction_id INTEGER, timestamp INTEGER, video_call INTEGER, duration INTEGER, call_result INTEGER, bytes_transferred INTEGER, group_jid_row_id INTEGER NOT NULL DEFAULT 0, is_joinable_group_call INTEGER, call_creator_device_jid_row_id INTEGER NOT NULL DEFAULT 0, call_random_id TEXT, call_link_row_id INTEGER NOT NULL DEFAULT 0);
CREATE TABLE call_log_participant_v2 (_id INTEGER PRIMARY KEY AUTOINCREMENT, call_log_row_id INTEGER, jid_row_id INTEGER, call_result INTEGER);
CREATE TABLE joinable_call_log (call_log_row_id INTEGER PRIMARY KEY, call_id TEXT NOT NULL, joinable_video_call INTEGER NOT NULL DEFAULT 0, group_jid_row_id INTEGER NOT NULL DEFAULT 0);
CREATE TABLE missed_call_logs (_id INTEGER PRIMARY KEY AUTOINCREMENT, message_row_id INTEGER, timestamp INTEGER, video_call INTEGER, group_jid_row_id INTEGER NOT NULL DEFAULT 0, is_joinable_group_call INTEGER);
CREATE TABLE missed_call_log_participant (_id INTEGER PRIMARY KEY AUTOINCREMENT, call_logs_row_id INTEGER, jid TEXT, call_result INTEGER);
CREATE TABLE jid (_id INTEGER PRIMARY KEY AUTOINCREMENT, user TEXT NOT NULL, server TEXT NOT NULL, agent INTEGER, device INTEGER, type INTEGER, raw_string TEXT);
CREATE TABLE jid_map (lid_row_id INTEGER PRIMARY KEY NOT NULL, jid_row_id INTEGER NOT NULL);
CREATE TABLE lid_display_name (lid_row_id INTEGER PRIMARY KEY NOT NULL, display_name TEXT NOT NULL);
CREATE TABLE lid_chat_state (jid_row_id INTEGER PRIMARY KEY NOT NULL, is_pn_shared INTEGER NOT NULL DEFAULT 0);
CREATE TABLE chat (_id INTEGER PRIMARY KEY AUTOINCREMENT, jid_row_id INTEGER UNIQUE, hidden INTEGER, subject TEXT, created_timestamp INTEGER, display_message_row_id INTEGER, last_message_row_id INTEGER, last_read_message_row_id INTEGER, last_read_receipt_sent_message_row_id INTEGER, last_important_message_row_id INTEGER, archived INTEGER, sort_timestamp INTEGER, mod_tag INTEGER, gen REAL, spam_detection INTEGER, unseen_earliest_message_received_time INTEGER, unseen_message_count INTEGER, unseen_missed_calls_count INTEGER, unseen_row_count INTEGER, plaintext_disabled INTEGER, vcard_ui_dismissed INTEGER, change_number_notified_message_row_id INTEGER, show_group_description INTEGER, ephemeral_expiration INTEGER, last_read_ephemeral_message_row_id INTEGER, ephemeral_setting_timestamp INTEGER, ephemeral_disappearing_messages_initiator INTEGER, unseen_important_message_count INTEGER NOT NULL DEFAULT 0, group_type INTEGER NOT NULL DEFAULT 0, last_message_reaction_row_id INTEGER, last_seen_message_reaction_row_id INTEGER, unseen_message_reaction_count INTEGER, growth_lock_level INTEGER, growth_lock_expiration_ts INTEGER, last_read_message_sort_id INTEGER, display_message_sort_id INTEGER, last_message_sort_id INTEGER, last_read_receipt_sent_message_sort_id INTEGER, has_new_community_admin_dialog_been_acknowledged INTEGER NOT NULL DEFAULT 0, history_sync_progress INTEGER );
CREATE TABLE community_chat (chat_row_id INTEGER PRIMARY KEY, last_activity_ts INTEGER, last_activity_seen_ts INTEGER, join_ts INTEGER );
CREATE TABLE message_link (_id INTEGER PRIMARY KEY AUTOINCREMENT, chat_row_id INTEGER, message_row_id INTEGER, link_index INTEGER);
CREATE TABLE message_thumbnail (message_row_id INTEGER PRIMARY KEY, thumbnail BLOB);
CREATE TABLE media_hash_thumbnail (media_hash TEXT PRIMARY KEY, thumbnail BLOB);
CREATE TABLE message_forwarded(message_row_id INTEGER PRIMARY KEY, forward_score INTEGER);
CREATE TABLE message_text (message_row_id INTEGER PRIMARY KEY, description TEXT, page_title TEXT, url TEXT, font_style INTEGER, text_color INTEGER, background_color INTEGER, preview_type INTEGER, invite_link_group_type INTEGER NOT NULL DEFAULT 0);
CREATE TABLE message_quoted_text (message_row_id INTEGER PRIMARY KEY, thumbnail BLOB);
CREATE TABLE message_future(message_row_id INTEGER PRIMARY KEY, version INTEGER, data BLOB, future_message_type INTEGER);
CREATE TABLE message_revoked (message_row_id INTEGER PRIMARY KEY,revoked_key_id TEXT NOT NULL,admin_jid_row_id INTEGER,revoke_timestamp INTEGER);
CREATE TABLE message_rating (message_row_id INTEGER PRIMARY KEY, rating INTEGER NOT NULL);
CREATE TABLE message_payment (message_row_id INTEGER PRIMARY KEY, sender_jid_row_id INTEGER, receiver_jid_row_id INTEGER, amount_with_symbol TEXT, remote_resource TEXT, remote_message_sender_jid_row_id INTEGER, remote_message_from_me INTEGER, remote_message_key TEXT);
CREATE TABLE message_payment_transaction_reminder (message_row_id INTEGER PRIMARY KEY, web_stub TEXT, amount TEXT, transfer_date TEXT, payment_sender_name TEXT, expiration INTEGER, remote_message_key TEXT);
CREATE TABLE message_payment_status_update (message_row_id INTEGER PRIMARY KEY,transaction_info TEXT,transaction_data TEXT,init_timestamp TEXT,update_timestamp TEXT,amount_data TEXT);
CREATE TABLE message_send_count (message_row_id INTEGER PRIMARY KEY, send_count INTEGER);
CREATE TABLE message_system (message_row_id INTEGER PRIMARY KEY, action_type INTEGER NOT NULL);
CREATE TABLE message_system_group (message_row_id INTEGER PRIMARY KEY, is_me_joined INTEGER);
CREATE TABLE message_system_value_change (message_row_id INTEGER PRIMARY KEY, old_data TEXT);
CREATE TABLE message_system_number_change (message_row_id INTEGER PRIMARY KEY, old_jid_row_id INTEGER, new_jid_row_id INTEGER);
CREATE TABLE message_system_device_change (message_row_id INTEGER PRIMARY KEY, device_added_count INTEGER, device_removed_count INTEGER);
CREATE TABLE message_system_initial_privacy_provider(message_row_id INTEGER PRIMARY KEY, privacy_provider INTEGER NOT NULL DEFAULT 0, verified_biz_name TEXT, biz_state_id INTEGER);
CREATE TABLE message_system_photo_change (message_row_id INTEGER PRIMARY KEY, new_photo_id TEXT, old_photo BLOB, new_photo BLOB);
CREATE TABLE message_system_chat_participant (message_row_id INTEGER, user_jid_row_id INTEGER);
CREATE TABLE message_system_business_state (message_row_id INTEGER PRIMARY KEY, privacy_message_type INTEGER NOT NULL, business_name TEXT);
CREATE TABLE message_system_block_contact (message_row_id INTEGER PRIMARY KEY, is_blocked INTEGER);
CREATE TABLE message_system_linked_group_call(message_row_id INTEGER PRIMARY KEY, call_id TEXT, is_video_call INTEGER);
CREATE TABLE message_system_community_link_changed(message_row_id INTEGER PRIMARY KEY, old_group_type INTEGER, new_group_type INTEGER NOT NULL, linked_parent_group_jid_row_id INTEGER);
CREATE TABLE message_system_group_with_parent(message_row_id INTEGER PRIMARY KEY, linked_parent_group_name TEXT );
CREATE TABLE message_system_sibling_group_link_change (message_row_id INTEGER NOT NULL, subgroup_raw_jid TEXT NOT NULL, subgroup_subject TEXT NOT NULL, parent_group_jid_row_id INTEGER, PRIMARY KEY (message_row_id, subgroup_raw_jid));
CREATE TABLE message_ui_elements(_id INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL, message_row_id INTEGER NOT NULL, element_type INTEGER, element_content TEXT);
CREATE TABLE message_quoted_ui_elements(message_row_id INTEGER NOT NULL PRIMARY KEY, element_type INTEGER, element_content TEXT);
CREATE TABLE message_ui_elements_reply (message_row_id INTEGER PRIMARY KEY, element_type INTEGER,reply_values TEXT,reply_description TEXT );
CREATE TABLE message_quoted_ui_elements_reply (message_row_id INTEGER PRIMARY KEY, element_type INTEGER,reply_values TEXT,reply_description TEXT );
CREATE TABLE message_quoted_ui_elements_reply_legacy (message_row_id INTEGER PRIMARY KEY, element_type INTEGER,reply_values TEXT,reply_description TEXT );
CREATE TABLE message_add_on (_id INTEGER PRIMARY KEY AUTOINCREMENT, chat_row_id INTEGER, from_me INTEGER, key_id TEXT NOT NULL, sender_jid_row_id INTEGER, parent_message_row_id INTEGER, timestamp INTEGER, status INTEGER, message_add_on_type INTEGER, received_timestamp INTEGER);
CREATE TABLE message_add_on_orphan (_id INTEGER PRIMARY KEY AUTOINCREMENT, chat_row_id INTEGER, from_me INTEGER, key_id TEXT NOT NULL, sender_jid_row_id INTEGER, parent_chat_row_id INTEGER, parent_from_me INTEGER, parent_key_id TEXT NOT NULL, parent_sender_jid_row_id INTEGER, timestamp INTEGER, orphan_message_data BLOB);
CREATE TABLE message_add_on_receipt_device (receipt_device_id INTEGER PRIMARY KEY AUTOINCREMENT, message_add_on_row_id INTEGER, receipt_device_jid_row_id INTEGER, receipt_device_timestamp INTEGER, primary_device_version INTEGER);
CREATE TABLE message_add_on_reaction (message_add_on_row_id INTEGER PRIMARY KEY, reaction TEXT, sender_timestamp INTEGER);
CREATE TABLE message_poll (message_row_id INTEGER PRIMARY KEY, enc_key BLOB, selectable_options_count INTEGER, invalid_state INTEGER NOT NULL DEFAULT 0);
CREATE TABLE message_poll_option (_id INTEGER PRIMARY KEY AUTOINCREMENT, message_row_id INTEGER, option_sha256 TEXT, option_name TEXT, vote_total INTEGER);
CREATE TABLE message_add_on_poll_vote (message_add_on_row_id INTEGER PRIMARY KEY, sender_timestamp INTEGER);
CREATE TABLE message_add_on_poll_vote_selected_option (_id INTEGER PRIMARY KEY AUTOINCREMENT, message_add_on_row_id INTEGER, message_poll_option_id INTEGER);
CREATE TABLE message_add_on_keep_in_chat (message_add_on_row_id INTEGER PRIMARY KEY, keep_in_chat_state INTEGER NOT NULL DEFAULT 0, sender_timestamp INTEGER, keep_count INTEGER NOT NULL DEFAULT 0, actor_device_jid_row_id INTEGER);
CREATE TABLE message_secret (message_row_id INTEGER PRIMARY KEY, message_secret BLOB);
CREATE TABLE user_device_info (user_jid_row_id INTEGER PRIMARY KEY, raw_id INTEGER NOT NULL, timestamp INTEGER NOT NULL, expected_timestamp INTEGER NOT NULL, expected_ts_last_device_job_ts INTEGER NOT NULL, expected_timestamp_update_ts INTEGER NOT NULL);
CREATE TABLE message_privacy_state (message_row_id INTEGER NOT NULL PRIMARY KEY, host_storage INTEGER, actual_actors INTEGER, privacy_mode_ts INTEGER NOT NULL, business_name TEXT);
CREATE TABLE played_self_receipt(message_row_id INTEGER PRIMARY KEY, to_jid_row_id INTEGER NOT NULL, participant_jid_row_id INTEGER, message_id TEXT NOT NULL);
CREATE TABLE message_payment_invite (message_row_id INTEGER PRIMARY KEY, service INTEGER, expiration_timestamp INTEGER);
CREATE TABLE message_quoted_payment_invite (message_row_id INTEGER PRIMARY KEY, service INTEGER, expiration_timestamp INTEGER);
CREATE TABLE message_system_payment_invite_setup(message_row_id INTEGER PRIMARY KEY, service INTEGER, invite_used INTEGER);
CREATE TABLE message_quoted_blank_reply (message_row_id INTEGER PRIMARY KEY, parent_group_jid TEXT, group_subject  TEXT);
CREATE TABLE conversion_tuples (jid_row_id INTEGER PRIMARY KEY, data TEXT, source TEXT, biz_count INTEGER, has_user_sent_last_message BOOLEAN, last_interaction INTEGER);
CREATE TABLE labels (_id INTEGER PRIMARY KEY AUTOINCREMENT, label_name TEXT, predefined_id INTEGER, color_id INTEGER);
CREATE TABLE labeled_jid (_id INTEGER PRIMARY KEY AUTOINCREMENT, label_id INTEGER NOT NULL, jid_row_id INTEGER NOT NULL);
CREATE TABLE labeled_jids (_id INTEGER PRIMARY KEY AUTOINCREMENT, label_id INTEGER NOT NULL, jid TEXT);
CREATE TABLE labeled_messages(_id INTEGER PRIMARY KEY AUTOINCREMENT,label_id INTEGER NOT NULL,message_row_id INTEGER NOT NULL);
CREATE TABLE away_messages (_id INTEGER PRIMARY KEY AUTOINCREMENT, jid TEXT UNIQUE NOT NULL);
CREATE TABLE agent_devices (agent_id TEXT PRIMARY KEY NOT NULL,agent_name TEXT UNIQUE NOT NULL,device INTEGER,last_modified_time INTEGER,is_deleted BOOLEAN );
CREATE TABLE agent_message_attribution (message_row_id INTEGER PRIMARY KEY, agent_id TEXT NOT NULL);
CREATE TABLE agent_chat_assignment (jid_row_id INTEGER PRIMARY KEY, agent_id TEXT NOT NULL, is_opened BOOLEAN );
CREATE TABLE quick_replies (_id INTEGER PRIMARY KEY AUTOINCREMENT, title TEXT UNIQUE NOT NULL, content TEXT NOT NULL);
CREATE TABLE quick_reply_usage (_id INTEGER PRIMARY KEY AUTOINCREMENT, quick_reply_id TEXT NOT NULL, usage_date DATE, usage_count INTEGER);
CREATE TABLE quick_reply_keywords (_id INTEGER PRIMARY KEY AUTOINCREMENT, quick_reply_id TEXT NOT NULL, keyword_id TEXT NOT NULL);
CREATE TABLE keywords (_id INTEGER PRIMARY KEY AUTOINCREMENT, keyword TEXT UNIQUE NOT NULL);
CREATE TABLE quick_reply_attachments(_id INTEGER PRIMARY KEY AUTOINCREMENT, quick_reply_id TEXT NOT NULL, uri TEXT NOT NULL, caption TEXT, media_type INTEGER);
CREATE TABLE message_invoice (message_row_id INTEGER PRIMARY KEY,wa_invoice_id TEXT NOT NULL,amount TEXT NOT NULL,note TEXT NOT NULL,token TEXT,sender_jid_row_id INTEGER,receiver_jid_row_id INTEGER,status INTEGER,status_ts INTEGER,creation_ts INTEGER,attachment_type INTEGER,attachment_mimetype TEXT,attachment_media_key BLOB,attachment_media_key_ts INTEGER,attachment_file_sha256 BLOB,attachment_file_enc_sha256 BLOB,attachment_direct_path TEXT,attachment_jpeg_thumbnail BLOB,metadata TEXT);
CREATE TABLE message_quote_invoice (message_row_id INTEGER PRIMARY KEY,amount TEXT NOT NULL,note TEXT NOT NULL,status INTEGER,attachment_jpeg_thumbnail BLOB);
CREATE TABLE invoice_transactions (message_row_id INTEGER PRIMARY KEY,pay_transaction_id INTEGER);
CREATE TABLE message_view_once_media (message_row_id INTEGER PRIMARY KEY, state INTEGER NOT NULL );
CREATE TABLE message_ephemeral(message_row_id INTEGER PRIMARY KEY, duration INTEGER NOT NULL, expire_timestamp INTEGER NOT NULL, keep_in_chat INTEGER NOT NULL DEFAULT 0);
CREATE TABLE message_ephemeral_setting (message_row_id INTEGER PRIMARY KEY, setting_duration INTEGER, setting_reason INTEGER, user_jid_row_id_csv TEXT);
CREATE TABLE message_system_ephemeral_setting_not_applied(message_row_id INTEGER PRIMARY KEY, setting_duration INTEGER);
CREATE TABLE message_broadcast_ephemeral (message_row_id INTEGER PRIMARY KEY, shared_secret BLOB NOT NULL );
CREATE TABLE message_status_psa_campaign (message_row_id INTEGER PRIMARY KEY, campaign_id TEXT , duration INTEGER, first_seen_timestamp INTEGER, action_link_url TEXT , action_link_button_title TEXT );
CREATE TABLE call_link (_id INTEGER PRIMARY KEY AUTOINCREMENT, token TEXT NOT NULL, creator_jid_row_id INTEGER NOT NULL DEFAULT 0);
CREATE INDEX message_chat_sort_id_index ON message (chat_row_id, sort_id);
CREATE INDEX message_starred_sort_id_index ON message (starred, sort_id);
CREATE INDEX message_sort_id_index ON message (sort_id);
CREATE UNIQUE INDEX message_key_index ON message (chat_row_id, from_me, key_id, sender_jid_row_id);
CREATE INDEX message_starred_index ON message(starred);
CREATE INDEX message_type_chat_index ON message(chat_row_id, message_type);
CREATE INDEX message_chat_id_index ON message (chat_row_id,_id);
CREATE INDEX message_type_index ON message(message_type);
CREATE UNIQUE INDEX message_orphaned_edit_key_index ON message_orphaned_edit (key_id, from_me, chat_row_id, sender_jid_row_id);
CREATE UNIQUE INDEX quoted_mentions_index ON message_quoted_mentions (message_row_id, jid_row_id);
CREATE UNIQUE INDEX message_quoted_vcard_index ON message_quoted_vcard (message_row_id, vcard);
CREATE INDEX message_template_index ON message_template (message_row_id);
CREATE INDEX message_template_button_index ON message_template_button (message_row_id);
CREATE INDEX message_media_chat_index ON message_media(chat_row_id);
CREATE INDEX message_media_hash_index ON message_media(file_hash);
CREATE INDEX message_media_original_file_hash_index ON message_media(original_file_hash);
CREATE UNIQUE INDEX message_media_interactive_annotation_index ON message_media_interactive_annotation (message_row_id, sort_order);
CREATE UNIQUE INDEX message_media_interactive_annotation_vertex_index ON message_media_interactive_annotation_vertex (message_media_interactive_annotation_row_id, sort_order);
CREATE UNIQUE INDEX frequent_index ON frequent (jid_row_id, type);
CREATE UNIQUE INDEX receipt_user_index ON receipt_user(message_row_id,receipt_user_jid_row_id);
CREATE UNIQUE INDEX receipt_device_index ON receipt_device (message_row_id, receipt_device_jid_row_id);
CREATE INDEX receipt_device_table_device_index ON receipt_device (receipt_device_jid_row_id);
CREATE UNIQUE INDEX receipt_orphaned_index ON receipt_orphaned (chat_row_id, from_me, key_id, receipt_device_jid_row_id, receipt_recipient_jid_row_id, status);
CREATE INDEX receipts_key_index ON receipts (key_remote_jid, key_id);
CREATE UNIQUE INDEX mentions_index ON message_mentions (message_row_id, jid_row_id);
CREATE UNIQUE INDEX message_vcard_index ON message_vcard (message_row_id, vcard);
CREATE UNIQUE INDEX message_media_vcard_count_index ON message_media_vcard_count(message_row_id);
CREATE UNIQUE INDEX message_vcard_jid_index ON message_vcard_jid(vcard_jid_row_id, vcard_row_id, message_row_id);
CREATE UNIQUE INDEX user_device_index ON user_device (user_jid_row_id,device_jid_row_id);
CREATE UNIQUE INDEX group_participant_user_index ON group_participant_user (group_jid_row_id, user_jid_row_id);
CREATE UNIQUE INDEX group_participant_device_index ON group_participant_device (group_participant_row_id, device_jid_row_id);
CREATE UNIQUE INDEX group_past_participant_user_index ON group_past_participant_user (group_jid_row_id, user_jid_row_id);
CREATE INDEX group_past_participant_user_timestamp_index ON group_past_participant_user (timestamp);
CREATE UNIQUE INDEX group_participants_index ON group_participants (gjid, jid);
CREATE INDEX group_participants_history_index ON group_participants_history (gjid);
CREATE UNIQUE INDEX group_notification_version_index ON group_notification_version (group_jid_row_id);
CREATE UNIQUE INDEX messages_thumbnail_key_index ON message_thumbnails (key_remote_jid, key_from_me, key_id);
CREATE INDEX mms_thumbnail_metadata_transferred_index ON mms_thumbnail_metadata(transferred);
CREATE INDEX deleted_chat_job_index ON deleted_chat_job (chat_row_id, _id);
CREATE UNIQUE INDEX message_payment_transaction_id_index ON pay_transaction (id);
CREATE UNIQUE INDEX call_log_key_index ON call_log (jid_row_id, from_me, call_id, transaction_id);
CREATE UNIQUE INDEX call_log_participant_key_index ON call_log_participant_v2 (call_log_row_id, jid_row_id);
CREATE UNIQUE INDEX joinable_call_log_call_id_index ON joinable_call_log (call_id);
CREATE INDEX joinable_call_log_group_jid_row_id_index ON joinable_call_log (group_jid_row_id);
CREATE UNIQUE INDEX missed_call_logs_key_index ON missed_call_logs (message_row_id);
CREATE UNIQUE INDEX missed_call_log_participants_key_index on missed_call_log_participant (call_logs_row_id, jid);
CREATE UNIQUE INDEX jid_key_new_index ON jid (user, server, agent, device, type);
CREATE UNIQUE INDEX jid_raw_string_index ON jid (    raw_string);
CREATE INDEX jid_lid_map_jid_index ON jid_map (jid_row_id);
CREATE INDEX chat_group_type_index ON chat (group_type);
CREATE UNIQUE INDEX message_link_index ON message_link (message_row_id, link_index);
CREATE INDEX message_system_chat_participant_index ON message_system_chat_participant (message_row_id);
CREATE INDEX message_row_id_index ON message_ui_elements (message_row_id);
CREATE UNIQUE INDEX message_add_on_key_index on message_add_on (chat_row_id, from_me, key_id, sender_jid_row_id);
CREATE INDEX message_add_on_parent_message_row_id_index on message_add_on (parent_message_row_id);
CREATE INDEX message_add_on_chat_status_index on message_add_on (chat_row_id, status);
CREATE INDEX message_add_on_status_index on message_add_on (status);
CREATE UNIQUE INDEX message_add_on_orphan_key_index on message_add_on_orphan (chat_row_id, from_me, key_id, sender_jid_row_id);
CREATE INDEX message_add_on_orphan_parent_key_index on message_add_on_orphan (parent_chat_row_id, parent_from_me, parent_key_id, parent_sender_jid_row_id);
CREATE UNIQUE INDEX message_add_on_receipt_device_index ON message_add_on_receipt_device (message_add_on_row_id, receipt_device_jid_row_id);
CREATE INDEX message_add_on_receipt_device_jid_index ON message_add_on_receipt_device (receipt_device_jid_row_id);
CREATE INDEX message_poll_option_message_row_id_index on message_poll_option (message_row_id);
CREATE INDEX message_add_on_poll_vote_selected_option_message_add_on_row_id_index on message_add_on_poll_vote_selected_option (message_add_on_row_id);
CREATE UNIQUE INDEX user_device_info_index ON user_device_info (user_jid_row_id);
CREATE UNIQUE INDEX labels_index ON labels (label_name);
CREATE UNIQUE INDEX labeled_jid_index ON labeled_jid (label_id, jid_row_id);
CREATE UNIQUE INDEX labeled_jids_index ON labeled_jids (label_id, jid);
CREATE UNIQUE INDEX labeled_messages_index ON labeled_messages (label_id, message_row_id);
CREATE INDEX agent_device_index ON agent_devices (device);
CREATE INDEX chat_assignee_index ON agent_chat_assignment (agent_id);
CREATE INDEX attachments_quick_reply_id_index ON quick_reply_attachments (quick_reply_id);
CREATE INDEX message_view_once_media_state_index ON message_view_once_media (state);
CREATE INDEX message_ephemeral_expire_timestamp_index ON message_ephemeral(expire_timestamp);
CREATE UNIQUE INDEX call_link_token_index ON call_link(token);
CREATE VIRTUAL TABLE message_ftsv2 USING FTS4(content, fts_jid, fts_namespace)
/* message_ftsv2(content,fts_jid,fts_namespace) */;
CREATE VIRTUAL TABLE labeled_messages_fts USING FTS3()
/* labeled_messages_fts(content) */;
CREATE VIEW message_view AS SELECT message._id AS _id, message.sort_id AS sort_id, message.chat_row_id AS chat_row_id, from_me, key_id, sender_jid_row_id, NULL AS sender_jid_raw_string, status, broadcast, recipient_count, participant_hash, origination_flags, origin, timestamp, received_timestamp, receipt_server_timestamp, message_type, text_data, starred, lookup_tables, message_add_on_flags, NULL AS data, NULL AS media_url, NULL AS media_mime_type, NULL AS media_size, NULL AS media_name, NULL AS media_caption, NULL AS media_hash, NULL AS media_duration, NULL AS latitude, NULL AS longitude, NULL AS thumb_image, NULL AS raw_data, NULL AS quoted_row_id, NULL AS mentioned_jids, NULL AS multicast_id, NULL AS edit_version, NULL AS media_enc_hash, NULL AS payment_transaction_id, NULL AS preview_type, NULL AS receipt_device_timestamp, NULL AS read_device_timestamp, NULL AS played_device_timestamp, NULL AS future_message_type, 2 AS table_version FROM message
/* message_view(_id,sort_id,chat_row_id,from_me,key_id,sender_jid_row_id,sender_jid_raw_string,status,broadcast,recipient_count,participant_hash,origination_flags,origin,timestamp,received_timestamp,receipt_server_timestamp,message_type,text_data,starred,lookup_tables,message_add_on_flags,data,media_url,media_mime_type,media_size,media_name,media_caption,media_hash,media_duration,latitude,longitude,thumb_image,raw_data,quoted_row_id,mentioned_jids,multicast_id,edit_version,media_enc_hash,payment_transaction_id,preview_type,receipt_device_timestamp,read_device_timestamp,played_device_timestamp,future_message_type,table_version) */;
CREATE VIEW available_message_view AS  SELECT message._id AS _id, message.sort_id AS sort_id, message.chat_row_id AS chat_row_id, from_me, key_id, sender_jid_row_id, NULL AS sender_jid_raw_string, status, broadcast, recipient_count, participant_hash, origination_flags, origin, timestamp, received_timestamp, receipt_server_timestamp, message_type, text_data, starred, lookup_tables, message_add_on_flags, NULL AS data, NULL AS media_url, NULL AS media_mime_type, NULL AS media_size, NULL AS media_name, NULL AS media_caption, NULL AS media_hash, NULL AS media_duration, NULL AS latitude, NULL AS longitude, NULL AS thumb_image, NULL AS raw_data, NULL AS quoted_row_id, NULL AS mentioned_jids, NULL AS multicast_id, NULL AS edit_version, NULL AS media_enc_hash, NULL AS payment_transaction_id, NULL AS preview_type, NULL AS receipt_device_timestamp, NULL AS read_device_timestamp, NULL AS played_device_timestamp, NULL AS future_message_type, 2 AS table_version, expire_timestamp, keep_in_chat FROM message LEFT JOIN deleted_chat_job AS job ON job.chat_row_id = message.chat_row_id LEFT JOIN message_ephemeral AS message_ephemeral ON message._id = message_ephemeral.message_row_id WHERE  IFNULL(NOT((IFNULL(message.starred, 0) = 0 AND message._id <= IFNULL(job.deleted_message_row_id, 1)) OR (IFNULL(message.starred, 0) = 1 AND message._id <= IFNULL(job.deleted_starred_message_row_id, 1)) OR ( (job.deleted_message_categories IS NOT NULL) AND (job.deleted_message_categories LIKE '%"' || message.message_type || '"%') AND ((IFNULL(message.starred, 0) = 0 AND message._id <= IFNULL(job.deleted_categories_message_row_id, 1)) OR (IFNULL(message.starred, 0) = 1 AND message._id <= IFNULL(job.deleted_categories_starred_message_row_id, 1)))) OR ((job.singular_message_delete_rows_id IS NOT NULL) AND (job.singular_message_delete_rows_id LIKE '%"' || message._id || '"%'))), 0)
/* available_message_view(_id,sort_id,chat_row_id,from_me,key_id,sender_jid_row_id,sender_jid_raw_string,status,broadcast,recipient_count,participant_hash,origination_flags,origin,timestamp,received_timestamp,receipt_server_timestamp,message_type,text_data,starred,lookup_tables,message_add_on_flags,data,media_url,media_mime_type,media_size,media_name,media_caption,media_hash,media_duration,latitude,longitude,thumb_image,raw_data,quoted_row_id,mentioned_jids,multicast_id,edit_version,media_enc_hash,payment_transaction_id,preview_type,receipt_device_timestamp,read_device_timestamp,played_device_timestamp,future_message_type,table_version,expire_timestamp,keep_in_chat) */;
CREATE VIEW deleted_messages_view AS   SELECT message._id AS _id, message.sort_id AS sort_id, message.chat_row_id AS chat_row_id, from_me, key_id, sender_jid_row_id, NULL AS sender_jid_raw_string, status, broadcast, recipient_count, participant_hash, origination_flags, origin, timestamp, received_timestamp, receipt_server_timestamp, message_type, text_data, starred, lookup_tables, message_add_on_flags, NULL AS data, NULL AS media_url, NULL AS media_mime_type, NULL AS media_size, NULL AS media_name, NULL AS media_caption, NULL AS media_hash, NULL AS media_duration, NULL AS latitude, NULL AS longitude, NULL AS thumb_image, NULL AS raw_data, NULL AS quoted_row_id, NULL AS mentioned_jids, NULL AS multicast_id, NULL AS edit_version, NULL AS media_enc_hash, NULL AS payment_transaction_id, NULL AS preview_type, NULL AS receipt_device_timestamp, NULL AS read_device_timestamp, NULL AS played_device_timestamp, NULL AS future_message_type, 2 AS table_version, ((((job.singular_message_delete_rows_id LIKE '%"' || message._id || '"%') AND (job.delete_files_singular_delete== 1)) OR ((job.deleted_messages_remove_files == 1) AND ((IFNULL(message.starred, 0) = 0 AND message._id <= IFNULL(job.deleted_message_row_id, 1)) OR (IFNULL(message.starred, 0) = 1 AND message._id <= IFNULL(job.deleted_starred_message_row_id, 1)))) OR ((job.deleted_categories_remove_files == 1) AND ( (job.deleted_message_categories IS NOT NULL) AND (job.deleted_message_categories LIKE '%"' || message.message_type || '"%') AND ((IFNULL(message.starred, 0) = 0 AND message._id <= IFNULL(job.deleted_categories_message_row_id, 1)) OR (IFNULL(message.starred, 0) = 1 AND message._id <= IFNULL(job.deleted_categories_starred_message_row_id, 1))))))) as remove_files FROM  deleted_chat_job AS job JOIN message AS message  ON job.chat_row_id = message.chat_row_id   WHERE  IFNULL((IFNULL(message.starred, 0) = 0 AND message._id <= IFNULL(job.deleted_message_row_id, 1)) OR (IFNULL(message.starred, 0) = 1 AND message._id <= IFNULL(job.deleted_starred_message_row_id, 1)) OR ( (job.deleted_message_categories IS NOT NULL) AND (job.deleted_message_categories LIKE '%"' || message.message_type || '"%') AND ((IFNULL(message.starred, 0) = 0 AND message._id <= IFNULL(job.deleted_categories_message_row_id, 1)) OR (IFNULL(message.starred, 0) = 1 AND message._id <= IFNULL(job.deleted_categories_starred_message_row_id, 1)))) OR ((job.singular_message_delete_rows_id IS NOT NULL) AND (job.singular_message_delete_rows_id LIKE '%"' || message._id || '"%')), 0) ORDER BY message._id
/* deleted_messages_view(_id,sort_id,chat_row_id,from_me,key_id,sender_jid_row_id,sender_jid_raw_string,status,broadcast,recipient_count,participant_hash,origination_flags,origin,timestamp,received_timestamp,receipt_server_timestamp,message_type,text_data,starred,lookup_tables,message_add_on_flags,data,media_url,media_mime_type,media_size,media_name,media_caption,media_hash,media_duration,latitude,longitude,thumb_image,raw_data,quoted_row_id,mentioned_jids,multicast_id,edit_version,media_enc_hash,payment_transaction_id,preview_type,receipt_device_timestamp,read_device_timestamp,played_device_timestamp,future_message_type,table_version,remove_files) */;
CREATE VIEW deleted_messages_ids_view AS  SELECT message._id, message.sort_id, message.chat_row_id, message.message_type FROM deleted_chat_job AS job  JOIN message AS message  ON job.chat_row_id = message.chat_row_id WHERE  IFNULL((IFNULL(message.starred, 0) = 0 AND message._id <= IFNULL(job.deleted_message_row_id, 1)) OR (IFNULL(message.starred, 0) = 1 AND message._id <= IFNULL(job.deleted_starred_message_row_id, 1)) OR ( (job.deleted_message_categories IS NOT NULL) AND (job.deleted_message_categories LIKE '%"' || message.message_type || '"%') AND ((IFNULL(message.starred, 0) = 0 AND message._id <= IFNULL(job.deleted_categories_message_row_id, 1)) OR (IFNULL(message.starred, 0) = 1 AND message._id <= IFNULL(job.deleted_categories_starred_message_row_id, 1)))) OR ((job.singular_message_delete_rows_id IS NOT NULL) AND (job.singular_message_delete_rows_id LIKE '%"' || message._id || '"%')), 0)
/* deleted_messages_ids_view(_id,sort_id,chat_row_id,message_type) */;
CREATE VIEW chat_view AS SELECT chat._id AS _id, jid.raw_string AS raw_string_jid, hidden AS hidden, subject AS subject, created_timestamp AS created_timestamp, display_message_row_id AS display_message_row_id, last_message_row_id AS last_message_row_id, last_read_message_row_id AS last_read_message_row_id, last_read_receipt_sent_message_row_id AS last_read_receipt_sent_message_row_id, last_important_message_row_id AS last_important_message_row_id, archived AS archived, sort_timestamp AS sort_timestamp, mod_tag AS mod_tag, gen AS gen, spam_detection AS spam_detection, unseen_earliest_message_received_time AS unseen_earliest_message_received_time, unseen_message_count AS unseen_message_count, unseen_missed_calls_count AS unseen_missed_calls_count, unseen_row_count AS unseen_row_count, unseen_message_reaction_count AS unseen_message_reaction_count, last_message_reaction_row_id AS last_message_reaction_row_id, last_seen_message_reaction_row_id AS last_seen_message_reaction_row_id, plaintext_disabled AS plaintext_disabled, vcard_ui_dismissed AS vcard_ui_dismissed, change_number_notified_message_row_id AS change_number_notified_message_row_id, show_group_description AS show_group_description, ephemeral_expiration AS ephemeral_expiration, last_read_ephemeral_message_row_id AS last_read_ephemeral_message_row_id, ephemeral_setting_timestamp AS ephemeral_setting_timestamp, ephemeral_disappearing_messages_initiator AS ephemeral_disappearing_messages_initiator, unseen_important_message_count AS unseen_important_message_count, group_type AS group_type, growth_lock_level AS growth_lock_level, growth_lock_expiration_ts AS growth_lock_expiration_ts, last_read_message_sort_id AS last_read_message_sort_id, display_message_sort_id AS display_message_sort_id, last_message_sort_id AS last_message_sort_id, last_read_receipt_sent_message_sort_id AS last_read_receipt_sent_message_sort_id, has_new_community_admin_dialog_been_acknowledged AS has_new_community_admin_dialog_been_acknowledged, history_sync_progress AS history_sync_progress FROM chat chat LEFT JOIN jid jid ON chat.jid_row_id = jid._id
/* chat_view(_id,raw_string_jid,hidden,subject,created_timestamp,display_message_row_id,last_message_row_id,last_read_message_row_id,last_read_receipt_sent_message_row_id,last_important_message_row_id,archived,sort_timestamp,mod_tag,gen,spam_detection,unseen_earliest_message_received_time,unseen_message_count,unseen_missed_calls_count,unseen_row_count,unseen_message_reaction_count,last_message_reaction_row_id,last_seen_message_reaction_row_id,plaintext_disabled,vcard_ui_dismissed,change_number_notified_message_row_id,show_group_description,ephemeral_expiration,last_read_ephemeral_message_row_id,ephemeral_setting_timestamp,ephemeral_disappearing_messages_initiator,unseen_important_message_count,group_type,growth_lock_level,growth_lock_expiration_ts,last_read_message_sort_id,display_message_sort_id,last_message_sort_id,last_read_receipt_sent_message_sort_id,has_new_community_admin_dialog_been_acknowledged,history_sync_progress) */;
CREATE TRIGGER call_log_bd_for_call_log_participant_v2_trigger BEFORE DELETE ON call_log BEGIN DELETE FROM call_log_participant_v2 WHERE call_log_row_id=old._id; END;
CREATE TRIGGER call_log_bd_for_joinable_call_log_trigger BEFORE DELETE ON call_log BEGIN DELETE FROM joinable_call_log WHERE call_log_row_id=old._id; END;
CREATE TRIGGER chat_bd_for_community_chat_trigger BEFORE DELETE ON chat BEGIN DELETE FROM community_chat WHERE chat_row_id=old._id; END;
CREATE TRIGGER chat_bd_for_message_add_on_orphan_trigger BEFORE DELETE ON chat BEGIN DELETE FROM message_add_on_orphan WHERE parent_chat_row_id=old._id; END;
CREATE TRIGGER chat_bd_for_message_link_trigger BEFORE DELETE ON chat BEGIN DELETE FROM message_link WHERE chat_row_id=old._id; END;
CREATE TRIGGER group_participant_user_bd_for_group_participant_device_trigger BEFORE DELETE ON group_participant_user BEGIN DELETE FROM group_participant_device WHERE group_participant_row_id=old._id; END;
CREATE TRIGGER labels_bd_for_labeled_jid_trigger BEFORE DELETE ON labels BEGIN DELETE FROM labeled_jid WHERE label_id=old._id; END;
CREATE TRIGGER labels_bd_for_labeled_jids_trigger BEFORE DELETE ON labels BEGIN DELETE FROM labeled_jids WHERE label_id=old._id; END;
CREATE TRIGGER labels_bd_for_labeled_messages_trigger BEFORE DELETE ON labels BEGIN DELETE FROM labeled_messages WHERE label_id=old._id; END;
CREATE TRIGGER message_add_on_bd_for_message_add_on_keep_in_chat_trigger BEFORE DELETE ON message_add_on BEGIN DELETE FROM message_add_on_keep_in_chat WHERE message_add_on_row_id=old._id; END;
CREATE TRIGGER message_add_on_bd_for_message_add_on_poll_vote_selected_option_trigger BEFORE DELETE ON message_add_on BEGIN DELETE FROM message_add_on_poll_vote_selected_option WHERE message_add_on_row_id=old._id; END;
CREATE TRIGGER message_add_on_bd_for_message_add_on_poll_vote_trigger BEFORE DELETE ON message_add_on BEGIN DELETE FROM message_add_on_poll_vote WHERE message_add_on_row_id=old._id; END;
CREATE TRIGGER message_add_on_bd_for_message_add_on_reaction_trigger BEFORE DELETE ON message_add_on BEGIN DELETE FROM message_add_on_reaction WHERE message_add_on_row_id=old._id; END;
CREATE TRIGGER message_add_on_bd_for_message_add_on_receipt_device_trigger BEFORE DELETE ON message_add_on BEGIN DELETE FROM message_add_on_receipt_device WHERE message_add_on_row_id=old._id; END;
CREATE TRIGGER message_bd_for_agent_message_attribution_trigger BEFORE DELETE ON message BEGIN DELETE FROM agent_message_attribution WHERE message_row_id=old._id; END;
CREATE TRIGGER message_bd_for_audio_data_trigger BEFORE DELETE ON message BEGIN DELETE FROM audio_data WHERE message_row_id=old._id; END;
CREATE TRIGGER message_bd_for_labeled_messages_fts_trigger BEFORE DELETE ON message BEGIN DELETE FROM labeled_messages_fts WHERE docid=old._id; END;
CREATE TRIGGER message_bd_for_labeled_messages_trigger BEFORE DELETE ON message BEGIN DELETE FROM labeled_messages WHERE message_row_id=old._id; END;
CREATE TRIGGER message_bd_for_message_add_on_trigger BEFORE DELETE ON message BEGIN DELETE FROM message_add_on WHERE parent_message_row_id=old._id; END;
CREATE TRIGGER message_bd_for_message_broadcast_ephemeral_trigger BEFORE DELETE ON message BEGIN DELETE FROM message_broadcast_ephemeral WHERE message_row_id=old._id; END;
CREATE TRIGGER message_bd_for_message_ephemeral_setting_trigger BEFORE DELETE ON message BEGIN DELETE FROM message_ephemeral_setting WHERE message_row_id=old._id; END;
CREATE TRIGGER message_bd_for_message_ephemeral_trigger BEFORE DELETE ON message BEGIN DELETE FROM message_ephemeral WHERE message_row_id=old._id; END;
CREATE TRIGGER message_bd_for_message_external_ad_content_trigger BEFORE DELETE ON message BEGIN DELETE FROM message_external_ad_content WHERE message_row_id=old._id; END;
CREATE TRIGGER message_bd_for_message_forwarded_trigger BEFORE DELETE ON message BEGIN DELETE FROM message_forwarded WHERE message_row_id=old._id; END;
CREATE TRIGGER message_bd_for_message_ftsv2_trigger BEFORE DELETE ON message BEGIN DELETE FROM message_ftsv2 WHERE docid=old._id; END;
CREATE TRIGGER message_bd_for_message_future_trigger BEFORE DELETE ON message BEGIN DELETE FROM message_future WHERE message_row_id=old._id; END;
CREATE TRIGGER message_bd_for_message_group_invite_trigger BEFORE DELETE ON message BEGIN DELETE FROM message_group_invite WHERE message_row_id=old._id; END;
CREATE TRIGGER message_bd_for_message_link_trigger BEFORE DELETE ON message BEGIN DELETE FROM message_link WHERE message_row_id=old._id; END;
CREATE TRIGGER message_bd_for_message_location_trigger BEFORE DELETE ON message BEGIN DELETE FROM message_location WHERE message_row_id=old._id; END;
CREATE TRIGGER message_bd_for_message_media_trigger BEFORE DELETE ON message BEGIN DELETE FROM message_media WHERE message_row_id=old._id; END;
CREATE TRIGGER message_bd_for_message_mentions_trigger BEFORE DELETE ON message BEGIN DELETE FROM message_mentions WHERE message_row_id=old._id; END;
CREATE TRIGGER message_bd_for_message_order_trigger BEFORE DELETE ON message BEGIN DELETE FROM message_order WHERE message_row_id=old._id; END;
CREATE TRIGGER message_bd_for_message_payment_invite_trigger BEFORE DELETE ON message BEGIN DELETE FROM message_payment_invite WHERE message_row_id=old._id; END;
CREATE TRIGGER message_bd_for_message_poll_trigger BEFORE DELETE ON message BEGIN DELETE FROM message_poll WHERE message_row_id=old._id; END;
CREATE TRIGGER message_bd_for_message_privacy_state_trigger BEFORE DELETE ON message BEGIN DELETE FROM message_privacy_state WHERE message_row_id=old._id; END;
CREATE TRIGGER message_bd_for_message_product_trigger BEFORE DELETE ON message BEGIN DELETE FROM message_product WHERE message_row_id=old._id; END;
CREATE TRIGGER message_bd_for_message_quoted_trigger BEFORE DELETE ON message BEGIN DELETE FROM message_quoted WHERE message_row_id=old._id; END;
CREATE TRIGGER message_bd_for_message_rating_trigger BEFORE DELETE ON message BEGIN DELETE FROM message_rating WHERE message_row_id=old._id; END;
CREATE TRIGGER message_bd_for_message_revoked_trigger BEFORE DELETE ON message BEGIN DELETE FROM message_revoked WHERE message_row_id=old._id; END;
CREATE TRIGGER message_bd_for_message_secret_trigger BEFORE DELETE ON message BEGIN DELETE FROM message_secret WHERE message_row_id=old._id; END;
CREATE TRIGGER message_bd_for_message_send_count_trigger BEFORE DELETE ON message BEGIN DELETE FROM message_send_count WHERE message_row_id=old._id; END;
CREATE TRIGGER message_bd_for_message_status_psa_campaign_trigger BEFORE DELETE ON message BEGIN DELETE FROM message_status_psa_campaign WHERE message_row_id=old._id; END;
CREATE TRIGGER message_bd_for_message_streaming_sidecar_trigger BEFORE DELETE ON message BEGIN DELETE FROM message_streaming_sidecar WHERE message_row_id=old._id; END;
CREATE TRIGGER message_bd_for_message_system_trigger BEFORE DELETE ON message BEGIN DELETE FROM message_system WHERE message_row_id=old._id; END;
CREATE TRIGGER message_bd_for_message_template_trigger BEFORE DELETE ON message BEGIN DELETE FROM message_template WHERE message_row_id=old._id; END;
CREATE TRIGGER message_bd_for_message_text_trigger BEFORE DELETE ON message BEGIN DELETE FROM message_text WHERE message_row_id=old._id; END;
CREATE TRIGGER message_bd_for_message_thumbnail_trigger BEFORE DELETE ON message BEGIN DELETE FROM message_thumbnail WHERE message_row_id=old._id; END;
CREATE TRIGGER message_bd_for_message_ui_elements_reply_trigger BEFORE DELETE ON message BEGIN DELETE FROM message_ui_elements_reply WHERE message_row_id=old._id; END;
CREATE TRIGGER message_bd_for_message_ui_elements_trigger BEFORE DELETE ON message BEGIN DELETE FROM message_ui_elements WHERE message_row_id=old._id; END;
CREATE TRIGGER message_bd_for_message_vcard_jid_trigger BEFORE DELETE ON message BEGIN DELETE FROM message_vcard_jid WHERE message_row_id=old._id; END;
CREATE TRIGGER message_bd_for_message_vcard_trigger BEFORE DELETE ON message BEGIN DELETE FROM message_vcard WHERE message_row_id=old._id; END;
CREATE TRIGGER message_bd_for_message_view_once_media_trigger BEFORE DELETE ON message BEGIN DELETE FROM message_view_once_media WHERE message_row_id=old._id; END;
CREATE TRIGGER message_bd_for_messages_hydrated_four_row_template_trigger BEFORE DELETE ON message BEGIN DELETE FROM messages_hydrated_four_row_template WHERE message_row_id=old._id; END;
CREATE TRIGGER message_bd_for_missed_call_logs_trigger BEFORE DELETE ON message BEGIN DELETE FROM missed_call_logs WHERE message_row_id=old._id; END;
CREATE TRIGGER message_bd_for_mms_thumbnail_metadata_trigger BEFORE DELETE ON message BEGIN DELETE FROM mms_thumbnail_metadata WHERE message_row_id=old._id; END;
CREATE TRIGGER message_bd_for_played_self_receipt_trigger BEFORE DELETE ON message BEGIN DELETE FROM played_self_receipt WHERE message_row_id=old._id; END;
CREATE TRIGGER message_bd_for_receipt_device_trigger BEFORE DELETE ON message BEGIN DELETE FROM receipt_device WHERE message_row_id=old._id; END;
CREATE TRIGGER message_bd_for_receipt_user_trigger BEFORE DELETE ON message BEGIN DELETE FROM receipt_user WHERE message_row_id=old._id; END;
CREATE TRIGGER message_media_bd_for_message_media_interactive_annotation_trigger BEFORE DELETE ON message_media BEGIN DELETE FROM message_media_interactive_annotation WHERE message_row_id=old.message_row_id; END;
CREATE TRIGGER message_media_bd_for_message_media_vcard_count_trigger BEFORE DELETE ON message_media BEGIN DELETE FROM message_media_vcard_count WHERE message_row_id=old.message_row_id; END;
CREATE TRIGGER message_media_interactive_annotation_bd_for_message_media_interactive_annotation_vertex_trigger BEFORE DELETE ON message_media_interactive_annotation BEGIN DELETE FROM message_media_interactive_annotation_vertex WHERE message_media_interactive_annotation_row_id=old._id; END;
CREATE TRIGGER message_poll_bd_for_message_poll_option_trigger BEFORE DELETE ON message_poll BEGIN DELETE FROM message_poll_option WHERE message_row_id=old.message_row_id; END;
CREATE TRIGGER message_quoted_bd_for_message_quoted_blank_reply_trigger BEFORE DELETE ON message_quoted BEGIN DELETE FROM message_quoted_blank_reply WHERE message_row_id=old.message_row_id; END;
CREATE TRIGGER message_quoted_bd_for_message_quoted_group_invite_trigger BEFORE DELETE ON message_quoted BEGIN DELETE FROM message_quoted_group_invite WHERE message_row_id=old.message_row_id; END;
CREATE TRIGGER message_quoted_bd_for_message_quoted_location_trigger BEFORE DELETE ON message_quoted BEGIN DELETE FROM message_quoted_location WHERE message_row_id=old.message_row_id; END;
CREATE TRIGGER message_quoted_bd_for_message_quoted_media_trigger BEFORE DELETE ON message_quoted BEGIN DELETE FROM message_quoted_media WHERE message_row_id=old.message_row_id; END;
CREATE TRIGGER message_quoted_bd_for_message_quoted_mentions_trigger BEFORE DELETE ON message_quoted BEGIN DELETE FROM message_quoted_mentions WHERE message_row_id = old.message_row_id; END;
CREATE TRIGGER message_quoted_bd_for_message_quoted_order_trigger BEFORE DELETE ON message_quoted BEGIN DELETE FROM message_quoted_order WHERE message_row_id=old.message_row_id; END;
CREATE TRIGGER message_quoted_bd_for_message_quoted_payment_invite_trigger BEFORE DELETE ON message_quoted BEGIN DELETE FROM message_quoted_payment_invite WHERE message_row_id=old.message_row_id; END;
CREATE TRIGGER message_quoted_bd_for_message_quoted_product_trigger BEFORE DELETE ON message_quoted BEGIN DELETE FROM message_quoted_product WHERE message_row_id=old.message_row_id; END;
CREATE TRIGGER message_quoted_bd_for_message_quoted_text_trigger BEFORE DELETE ON message_quoted BEGIN DELETE FROM message_quoted_text WHERE message_row_id=old.message_row_id; END;
CREATE TRIGGER message_quoted_bd_for_message_quoted_ui_elements_reply_trigger BEFORE DELETE ON message_quoted BEGIN DELETE FROM message_quoted_ui_elements_reply WHERE message_row_id=old.message_row_id; END;
CREATE TRIGGER message_quoted_bd_for_message_quoted_ui_elements_trigger BEFORE DELETE ON message_quoted BEGIN DELETE FROM message_quoted_ui_elements WHERE message_row_id=old.message_row_id; END;
CREATE TRIGGER message_quoted_bd_for_message_quoted_vcard_trigger BEFORE DELETE ON message_quoted BEGIN DELETE FROM message_quoted_vcard WHERE message_row_id=old.message_row_id; END;
CREATE TRIGGER message_quoted_bd_for_message_template_quoted_trigger BEFORE DELETE ON message_quoted BEGIN DELETE FROM message_template_quoted WHERE message_row_id=old.message_row_id; END;
CREATE TRIGGER message_system_bd_for_message_payment_status_update_trigger BEFORE DELETE ON message_system BEGIN DELETE FROM message_payment_status_update WHERE message_row_id=old.message_row_id; END;
CREATE TRIGGER message_system_bd_for_message_payment_transaction_reminder_trigger BEFORE DELETE ON message_system BEGIN DELETE FROM message_payment_transaction_reminder WHERE message_row_id=old.message_row_id; END;
CREATE TRIGGER message_system_bd_for_message_payment_trigger BEFORE DELETE ON message_system BEGIN DELETE FROM message_payment WHERE message_row_id=old.message_row_id; END;
CREATE TRIGGER message_system_bd_for_message_system_block_contact_trigger BEFORE DELETE ON message_system BEGIN DELETE FROM message_system_block_contact WHERE message_row_id=old.message_row_id; END;
CREATE TRIGGER message_system_bd_for_message_system_business_state_trigger BEFORE DELETE ON message_system BEGIN DELETE FROM message_system_business_state WHERE message_row_id=old.message_row_id; END;
CREATE TRIGGER message_system_bd_for_message_system_chat_participant_trigger BEFORE DELETE ON message_system BEGIN DELETE FROM message_system_chat_participant WHERE message_row_id=old.message_row_id; END;
CREATE TRIGGER message_system_bd_for_message_system_community_link_changed_trigger BEFORE DELETE ON message_system BEGIN DELETE FROM message_system_community_link_changed WHERE message_row_id=old.message_row_id; END;
CREATE TRIGGER message_system_bd_for_message_system_device_change_trigger BEFORE DELETE ON message_system BEGIN DELETE FROM message_system_device_change WHERE message_row_id=old.message_row_id; END;
CREATE TRIGGER message_system_bd_for_message_system_ephemeral_setting_not_applied_trigger BEFORE DELETE ON message_system BEGIN DELETE FROM message_system_ephemeral_setting_not_applied WHERE message_row_id=old.message_row_id; END;
CREATE TRIGGER message_system_bd_for_message_system_group_trigger BEFORE DELETE ON message_system BEGIN DELETE FROM message_system_group WHERE message_row_id=old.message_row_id; END;
CREATE TRIGGER message_system_bd_for_message_system_group_with_parent_trigger BEFORE DELETE ON message_system BEGIN DELETE FROM message_system_group_with_parent WHERE message_row_id=old.message_row_id; END;
CREATE TRIGGER message_system_bd_for_message_system_initial_privacy_provider_trigger BEFORE DELETE ON message_system BEGIN DELETE FROM message_system_initial_privacy_provider WHERE message_row_id=old.message_row_id; END;
CREATE TRIGGER message_system_bd_for_message_system_linked_group_call_trigger BEFORE DELETE ON message_system BEGIN DELETE FROM message_system_linked_group_call WHERE message_row_id=old.message_row_id; END;
CREATE TRIGGER message_system_bd_for_message_system_number_change_trigger BEFORE DELETE ON message_system BEGIN DELETE FROM message_system_number_change WHERE message_row_id=old.message_row_id; END;
CREATE TRIGGER message_system_bd_for_message_system_payment_invite_setup_trigger BEFORE DELETE ON message_system BEGIN DELETE FROM message_system_payment_invite_setup WHERE message_row_id=old.message_row_id; END;
CREATE TRIGGER message_system_bd_for_message_system_photo_change_trigger BEFORE DELETE ON message_system BEGIN DELETE FROM message_system_photo_change WHERE message_row_id=old.message_row_id; END;
CREATE TRIGGER message_system_bd_for_message_system_sibling_group_link_change_trigger BEFORE DELETE ON message_system BEGIN DELETE FROM message_system_sibling_group_link_change WHERE message_row_id=old.message_row_id; END;
CREATE TRIGGER message_system_bd_for_message_system_value_change_trigger BEFORE DELETE ON message_system BEGIN DELETE FROM message_system_value_change WHERE message_row_id=old.message_row_id; END;
CREATE TRIGGER message_template_bd_for_message_template_button_trigger BEFORE DELETE ON message_template BEGIN DELETE FROM message_template_button WHERE message_row_id=old.message_row_id; END;
CREATE TRIGGER message_vcard_bd_for_message_vcard_jid_trigger BEFORE DELETE ON message_vcard BEGIN DELETE FROM message_vcard_jid WHERE vcard_row_id=old._id; END;
CREATE TRIGGER missed_call_logs_bd_for_missed_call_log_participant_trigger BEFORE DELETE ON missed_call_logs BEGIN DELETE FROM missed_call_log_participant WHERE call_logs_row_id=old._id; END;
CREATE TRIGGER payment_background_bd_for_payment_background_order_trigger BEFORE DELETE ON payment_background BEGIN DELETE FROM payment_background_order WHERE background_id=old.background_id; END;
CREATE TRIGGER quick_replies_bd_for_quick_reply_attachments_trigger BEFORE DELETE ON quick_replies BEGIN DELETE FROM quick_reply_attachments WHERE quick_reply_id=old._id; END;
CREATE TRIGGER quick_replies_bd_for_quick_reply_keywords_trigger BEFORE DELETE ON quick_replies BEGIN DELETE FROM quick_reply_keywords WHERE quick_reply_id=old._id; END;
CREATE TRIGGER quick_replies_bd_for_quick_reply_usage_trigger BEFORE DELETE ON quick_replies BEGIN DELETE FROM quick_reply_usage WHERE quick_reply_id=old._id; END;